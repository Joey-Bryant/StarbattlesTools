"""**********************************************************************************
 * Title: app.py
 *
 * @author Joseph Bryant
 * @refactored by Isaiah Tadrous
 * @version 2.0.3
 * -------------------------------------------------------------------------------
 * Description:
 * This script serves as the Flask backend for the Star Battle puzzle application.
 * It provides a set of API endpoints to interact with the frontend, enabling
 * functionalities such as fetching new puzzles, solving puzzles using the Z3
 * solver, checking a player's solution for correctness, and exporting or
 * importing puzzle states. The application handles different puzzle sizes and
 * manages game state data, including the puzzle layout, player progress, and
 * action history.
 **********************************************************************************"""

# --- IMPORTS ---
from flask import Flask, jsonify, request
from flask_cors import CORS

# Use absolute imports from the 'backend' package.
from backend import puzzle_handler as pz
from backend.history_manager import HistoryManager
from backend.z3_solver import Z3StarBattleSolver, Z3_AVAILABLE
from backend import constants as const

# --- FLASK APP INITIALIZATION ---
app = Flask(__name__)
CORS(app)

# --- API ENDPOINTS ---
@app.route('/api/new_puzzle', methods=['GET'])
def get_new_puzzle():
    """
    Handles GET requests to fetch a new Star Battle puzzle.

    Retrieves a puzzle from local files based on a specified size ID.
    If the size ID is invalid or a puzzle cannot be fetched, it returns an
    appropriate error.

    :param int size_id: The ID for the desired puzzle size, passed as a query parameter.
                        Defaults to 5.
    :returns: A JSON response containing the 'regionGrid', 'starsPerRegion', and
              'sourcePuzzleData', or a JSON object with an 'error' message.
    :rtype: flask.Response
    """
    try:
        size_id = int(request.args.get('size_id', 5))
        if not 0 <= size_id < len(const.PUZZLE_DEFINITIONS):
            return jsonify({'error': 'Invalid size_id'}), 400
        
        # Call the new function to get a puzzle from local files
        puzzle_data = pz.get_puzzle_from_local_file(size_id)
        
        if puzzle_data:
            region_grid, _ = pz.get_grid_from_puzzle_task(puzzle_data)
            if region_grid:
                return jsonify({
                    'regionGrid': region_grid,
                    'starsPerRegion': puzzle_data['stars'],
                    'sourcePuzzleData': puzzle_data
                })
        return jsonify({'error': 'Failed to fetch puzzle from local files'}), 500
    except Exception as e:
        app.logger.error(f"Error in /api/new_puzzle: {e}")
        return jsonify({'error': 'An internal error occurred'}), 500

@app.route('/api/solve', methods=['POST'])
def find_solution():
    """
    Handles POST requests to find a valid solution for a given puzzle.

    This endpoint requires the Z3 solver to be available. It takes the puzzle's
    region layout and the number of stars per region, then uses the solver
    to find one valid solution.

    :param dict request.json: The request body containing 'regionGrid' and 'starsPerRegion'.
    :returns: A JSON response containing the 'solution' as a 2D array, 'solution': None
              if no solution is found, or an 'error' message.
    :rtype: flask.Response
    """
    if not Z3_AVAILABLE:
        return jsonify({'error': 'Z3 Solver not available on the server'}), 503
    try:
        data = request.json
        region_grid = data.get('regionGrid')
        stars_per_region = data.get('starsPerRegion')
        
        if not all([region_grid, stars_per_region]):
             return jsonify({'error': 'Missing regionGrid or starsPerRegion in request'}), 400
             
        solver = Z3StarBattleSolver(region_grid, stars_per_region)
        solutions, _ = solver.solve()
        
        if solutions:
            return jsonify({'solution': solutions[0]})
            
        return jsonify({'solution': None})
    except Exception as e:
        app.logger.error(f"Error in /api/solve: {e}")
        return jsonify({'error': 'An internal error occurred'}), 500

@app.route('/api/check', methods=['POST'])
def check_solution():
    """
    Handles POST requests to check if a player's solution is correct.

    It compares the player's submitted grid against the valid solution(s)
    generated by the Z3 solver.

    :param dict request.json: The request body containing 'regionGrid', 'playerGrid',
                              and 'starsPerRegion'.
    :returns: A JSON response with 'isCorrect' (boolean) indicating if the
              player's solution matches a valid one, or an 'error' message.
    :rtype: flask.Response
    """
    if not Z3_AVAILABLE:
        return jsonify({'error': 'Z3 Solver not available on the server'}), 503
    try:
        data = request.json
        region_grid = data.get('regionGrid')
        player_grid = data.get('playerGrid')
        stars_per_region = data.get('starsPerRegion')

        if not all([region_grid, player_grid, stars_per_region is not None]):
             return jsonify({'error': 'Missing data in request'}), 400

        solver = Z3StarBattleSolver(region_grid, stars_per_region)
        solutions, _ = solver.solve()
        
        is_correct = False
        if solutions:
            player_solution = [[1 if cell == const.STATE_STAR else 0 for cell in row] for row in player_grid]
            if player_solution in solutions:
                is_correct = True

        return jsonify({'isCorrect': is_correct})
    except Exception as e:
        app.logger.error(f"Error in /api/check: {e}")
        return jsonify({'error': 'An internal error occurred'}), 500

@app.route('/api/export', methods=['POST'])
def export_puzzle():
    """
    Handles POST requests to export the current puzzle state to a string.

    Serializes the puzzle's region grid, star count, player's grid, and
    optionally the move history into a single SBN (Star Battle Notation) string.

    :param dict request.json: The request body containing 'regionGrid', 'playerGrid',
                              'starsPerRegion', and an optional 'history' object.
    :returns: A JSON response with the 'exportString', or an 'error' message.
    :rtype: flask.Response
    """
    try:
        data = request.json
        region_grid, player_grid, stars_per_region, history = data.get('regionGrid'), data.get('playerGrid'), data.get('starsPerRegion'), data.get('history')
        if not all([region_grid, player_grid, stars_per_region is not None]):
            return jsonify({'error': 'Missing data in request'}), 400
            
        sbn_string = pz.encode_to_sbn(region_grid, stars_per_region, player_grid)
        
        if history and history.get('changes'):
            # Create a dummy initial_state as it's not needed for serialization
            initial_state = [[]] 
            manager = HistoryManager(initial_state)
            manager.changes = history['changes']
            manager.pointer = history.get('pointer', len(history['changes']))
            history_str = manager.serialize()
            if history_str:
                sbn_string += f"~{history_str}"
                
        return jsonify({'exportString': sbn_string})
    except Exception as e:
        app.logger.error(f"Error in /api/export: {e}")
        return jsonify({'error': 'An internal error occurred'}), 500

@app.route('/api/import', methods=['POST'])
def import_puzzle():
    """
    Handles POST requests to import a puzzle from a string.

    Deserializes a string (in SBN or other supported formats) into a full
    puzzle state, including the region grid, player grid, star count, and
    move history.

    :param dict request.json: The request body containing the 'importString'.
    :returns: A JSON response with the imported puzzle data ('regionGrid',
              'playerGrid', 'starsPerRegion', 'history'), or an 'error' message.
    :rtype: flask.Response
    """
    try:
        data = request.json
        import_string = data.get('importString')
        if not import_string:
            return jsonify({'error': 'No import string provided'}), 400
            
        puzzle_data = pz.universal_import(import_string)
        if not puzzle_data:
            return jsonify({'error': 'Could not recognize puzzle format'}), 400
            
        region_grid, _ = pz.parse_and_validate_grid(puzzle_data['task'])
        
        return jsonify({
            'regionGrid': region_grid,
            'playerGrid': puzzle_data.get('player_grid'),
            'starsPerRegion': puzzle_data.get('stars'),
            'history': puzzle_data.get('history')
        })
    except Exception as e:
        app.logger.error(f"Error in /api/import: {e}")
        return jsonify({'error': 'An internal error occurred'}), 500
